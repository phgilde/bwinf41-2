Starting solution of the Linear programming relaxation problem using Primal Simplex

Coin0506I Presolve 22366 (-22325) rows, 820 (0) columns and 46290 (-44650) elements
Clp1000I sum of infeasibilities 4.87523e-05 - average 2.17975e-09, 572 fixed columns
Coin0506I Presolve 1757 (-20609) rows, 248 (-572) columns and 3928 (-42362) elements
Clp0006I 0  Obj 667.70656 Primal inf 1.5647497e-05 (14) Dual inf 9.0000001e+09 (240)
Clp0029I End of values pass after 248 iterations
Clp0014I Perturbing problem by 0.001% of 1.0000001 - largest nonzero change 2.982246e-05 ( 0.001491123%) - largest zero change 2.8167904e-05
Clp0000I Optimal - objective value 666.22575
Clp0000I Optimal - objective value 666.22575
Coin0511I After Postsolve, objective 666.22575, infeasibilities - dual 0 (0), primal 0 (0)
Clp0006I 0  Obj 666.22575 Dual inf 2.9886203 (2)
Clp0014I Perturbing problem by 0.001% of 1 - largest nonzero change 2.9977417e-05 ( 0.0014988709%) - largest zero change 2.8696192e-05
Clp0000I Optimal - objective value 666.22575
Clp0000I Optimal - objective value 666.22575
Clp0000I Optimal - objective value 666.22575
Coin0511I After Postsolve, objective 666.22575, infeasibilities - dual 0 (0), primal 0 (0)
Clp0032I Optimal objective 666.2257506 - 0 iterations time 0.662, Presolve 0.03, Idiot 0.62

Starting MIP optimization
Cbc0045I MIPStart provided solution with cost 800.772
Cbc0012I Integer solution of 800.77198 found by Reduced search after 0 iterations and 0 nodes (0.10 seconds)
Cbc0031I 33 added rows had average density of 6.3030303
Cbc0013I At root node, 33 cuts changed objective from 666.22575 to 696.70931 in 2 passes
Cbc0014I Cut generator 0 (LazyConstraints) - 1 row cuts average 36.0 elements, 0 column cuts (0 active)  in 0.038 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Probing) - 64 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Gomory) - 16 row cuts average 455.6 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 12 row cuts average 90.3 elements, 0 column cuts (0 active)  in 0.033 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 1 row cuts average 38.0 elements, 0 column cuts (0 active)  in 1.488 seconds - new frequency is -100
Cbc0010I After 4 nodes, 5 on tree, 800.77198 best solution, best possible 696.70931 (2.74 seconds)
Cbc0010I After 8 nodes, 9 on tree, 800.77198 best solution, best possible 696.70931 (3.56 seconds)
Cbc0010I After 15 nodes, 8 on tree, 800.77198 best solution, best possible 696.70931 (4.34 seconds)
Cbc0010I After 22 nodes, 13 on tree, 800.77198 best solution, best possible 696.70931 (5.07 seconds)
Cbc0010I After 44 nodes, 19 on tree, 800.77198 best solution, best possible 696.70931 (5.77 seconds)
Cbc0004I Integer solution of 794.64588 found after 2482 iterations and 66 nodes (6.22 seconds)
Cbc0010I After 76 nodes, 21 on tree, 794.64588 best solution, best possible 696.70931 (6.48 seconds)
Cbc0010I After 102 nodes, 19 on tree, 794.64588 best solution, best possible 696.70931 (7.19 seconds)
Cbc0010I After 129 nodes, 16 on tree, 794.64588 best solution, best possible 696.70931 (7.91 seconds)
Cbc0010I After 149 nodes, 22 on tree, 794.64588 best solution, best possible 696.70931 (8.61 seconds)
Cbc0010I After 177 nodes, 24 on tree, 794.64588 best solution, best possible 696.70931 (9.34 seconds)
Cbc0010I After 202 nodes, 29 on tree, 794.64588 best solution, best possible 696.70931 (10.06 seconds)
Cbc0004I Integer solution of 785.11615 found after 7783 iterations and 210 nodes (10.29 seconds)
Cbc0010I After 234 nodes, 28 on tree, 785.11615 best solution, best possible 696.70931 (10.77 seconds)
Cbc0004I Integer solution of 771.9444 found after 8882 iterations and 257 nodes (11.27 seconds)
Cbc0010I After 267 nodes, 17 on tree, 771.9444 best solution, best possible 696.70931 (11.49 seconds)
Cbc0010I After 307 nodes, 11 on tree, 771.9444 best solution, best possible 696.70931 (12.19 seconds)
Cbc0010I After 341 nodes, 3 on tree, 771.9444 best solution, best possible 696.70931 (13.02 seconds)
Cbc0010I After 357 nodes, 8 on tree, 771.9444 best solution, best possible 696.70931 (13.72 seconds)
Cbc0010I After 376 nodes, 3 on tree, 771.9444 best solution, best possible 697.67605 (14.52 seconds)
Cbc0010I After 383 nodes, 8 on tree, 771.9444 best solution, best possible 697.67605 (15.27 seconds)
Cbc0010I After 395 nodes, 15 on tree, 771.9444 best solution, best possible 697.67605 (16.00 seconds)
Cbc0010I After 416 nodes, 20 on tree, 771.9444 best solution, best possible 697.67605 (16.70 seconds)
Cbc0010I After 438 nodes, 27 on tree, 771.9444 best solution, best possible 697.67605 (17.43 seconds)
Cbc0004I Integer solution of 742.8447 found after 17002 iterations and 450 nodes (17.83 seconds)
Cbc0010I After 468 nodes, 7 on tree, 742.8447 best solution, best possible 697.67605 (18.13 seconds)
Cbc0001I Search completed - best objective 742.8447014029588, took 18768 iterations and 490 nodes (18.64 seconds)
Cbc0032I Strong branching done 3944 times (45460 iterations), fathomed 36 nodeModell wird erstellt...
Suche Startlösung...
None
Suche optimale Lösung...
OptimizationStatus.OPTIMAL
C:\Users\Philip\Documents\programmieren\python\bwinf41-2\weniger-krumme-touren\beispiele\random\40\401.txt
Lösung gefunden!
s and fixed 68 variables
Cbc0035I Maximum depth 42, 22332 variables fixed on reduced cost
Total time (CPU seconds):       18.69   (Wallclock seconds):       18.69

